group 'com.zenvia.komposer'
version '1.2.4'

apply plugin: 'groovy'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'codenarc'

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

test {
    dependsOn codenarcTest
    testLogging.showStandardStreams = true
    outputs.upToDateWhen { false }
    finalizedBy jacocoTestReport
}

dependencies {

    compile 'org.codehaus.groovy:groovy-all:2.4.0'
    compile (group: 'com.spotify', name: 'docker-client', version: '3.1.1', classifier: 'shaded') {
        exclude group: 'com.fasterxml.jackson.jaxrs'
        exclude group: 'com.fasterxml.jackson.core'
        exclude group: 'com.fasterxml.jackson.datatype'
    }
    compile 'org.yaml:snakeyaml:1.15'
    compile group: 'org.slf4j', name:'slf4j-api', version: '1.7.12'
    compile group: 'junit', name: 'junit', version: '4.11'

    testCompile "org.spockframework:spock-core:1.0-groovy-2.4"
    testCompile 'com.athaydes:spock-reports:1.2.7'

    testRuntime 'cglib:cglib-nodep:3.1'
    testRuntime group: 'ch.qos.logback', name:'logback-classic', version: '1.0.0'
    testRuntime group: 'ch.qos.logback', name:'logback-core', version: '1.0.0'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from tasks.javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

artifacts {
    archives jar
    archives javadocJar
    archives sourcesJar
}

gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.allTasks.any { it instanceof Sign }) {
        allprojects {
            ext."signing.password" = System.getenv('ENCRYPTION_PASSWORD')
            if (!ext."signing.password") {
                ext."signing.password" = System.getProperty('ENCRYPTION_PASSWORD')
            }
        }
    }
}


signing {
    sign configurations.archives
}

ext {

    ossrhUsername = System.getenv('NEXUS_USER')
    ossrhPassword = System.getenv('NEXUS_PASS')

    if (!ossrhPassword) {
        ossrhPassword = System.getProperty('NEXUS_PASS')
    }

    if (!ossrhUsername) {
        ossrhUsername = System.getProperty('NEXUS_USER')
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'Docker Komposer'
                packaging 'jar'
                description 'A port to run create docker environments based on docker-compose in Java/Groovy.'
                url 'https://github.com/zenvia-mobile/docker-komposer'

                scm {
                    url 'scm:git@github.com/zenvia-mobile/docker-komposer.git'
                    connection 'scm:git@github.com/zenvia-mobile/docker-komposer.git'
                    developerConnection 'scm:git@github.com/zenvia-mobile/docker-komposer.git'
                }

                licenses {
                    license {
                        name 'The Apache License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id 'tiagodeoliveira'
                        name 'Tiago de Oliveira'
                        email 'tiago.oliveira@gmx.us'
                    }
                }
            }
        }
    }
}
